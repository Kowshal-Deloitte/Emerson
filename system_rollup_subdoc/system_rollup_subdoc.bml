rollupStr = stringbuilder();
groupSeqDict= get(quoteData, "groupSeqDict", "dict<string>");
recurRevDict=    get(quoteData, "recurRevDict", "dict<anytype>");
nonRecurRevDict=    get(quoteData, "nonRecurRevDict", "dict<anytype>");
usageRevDict=    get(quoteData, "usageRevDict", "dict<anytype>");
contractValDict=    get(quoteData, "contractValDict", "dict<anytype>");
taxValDict=    get(quoteData, "taxValDict", "dict<anytype>");
taxAmountDict=    get(quoteData, "taxAmountDict", "dict<anytype>");
totalPriceDict=    get(quoteData, "totalPriceDict", "dict<anytype>");
totalAmountDict=    get(quoteData, "totalAmountDict", "dict<anytype>");
monthlyRecurRevDict=    get(quoteData, "monthlyRecurRevDict", "dict<anytype>");
monthlyUsageRevDict=    get(quoteData, "monthlyUsageRevDict", "dict<anytype>");
priceTypeDict=    get(quoteData, "priceTypeDict", "dict<string>");
pricePeriodDict=    get(quoteData, "pricePeriodDict", "dict<string>");
contractPeriodsDict=    get(quoteData, "contractPeriodsDict", "dict<anytype>");
docGrpSeqDict=    get(quoteData, "docGrpSeqDict", "dict<string>");
contractListValDict=    get(quoteData, "contractListValDict", "dict<anytype>");
quantityDict=    get(quoteData, "quantityDict", "dict<anytype>");
rootPriceTypeDict=    get(quoteData, "rootPriceTypeDict", "dict<string>");
rootPricePeriodDict=    get(quoteData, "rootPricePeriodDict", "dict<string>");
rootContractPeriodsDict=    get(quoteData, "rootContractPeriodsDict", "dict<anytype>");
rootRevenueCatDict=    get(quoteData, "rootRevenueCatDict", "dict<string>");
mainDocDict = get(quoteData, _transaction_document_number, "dict<anytype>");
// populate charge rollups
docNum = get(lineDict, "_document_number", "string");
 
hasCharges = false;
contractStartDate = get(lineDict, "contractStartDate_l", "string");
contractEndDate = get(lineDict, "contractEndDate_l", "string");
  
taxPriceRollup = 0;
taxAmountRollup = 0;
totalPriceRollup = 0;
totalAmountRollup = 0;
v_taxPresent = get(mainDocDict, "_transaction_tax_isTaxPresent_t", "string");
 
if(v_taxPresent == "true"){
    if(containskey(lineDict, "_tax_taxRollup_l")){
        taxPriceRollup = get(lineDict, "_tax_taxRollup_l", "float");
    }
    if(containskey(lineDict, "_tax_taxAmountRollup_l")){
        taxAmountRollup = get(lineDict, "_tax_taxAmountRollup_l", "float");
    }
    if(containskey(lineDict, "_tax_totalPriceRollup_l")){
        totalPriceRollup = get(lineDict, "_tax_totalPriceRollup_l", "float");
    }
    if(containskey(lineDict, "_tax_totalAmountRollup_l")){
        totalAmountRollup = get(lineDict, "_tax_totalAmountRollup_l", "float");
    }
}
chargeArraySetStr = get(lineDict, "_chargeSet", "string");
if(isnull(chargeArraySetStr) <> true) { // Assign values to all rollup attributes of lines having charges
    chargeArraySet = jsonarray(chargeArraySetStr);
    chargesSize = jsonarraysize(chargeArraySet);
    hasCharges = chargesSize > 0;
      
    if(hasCharges AND get(lineDict, "_parent_doc_number", "string") <> "") {
        sbappend(rollupStr, docNum, "~priceTypeRollup_l~", get(lineDict, "priceTypeRollup_l", "string"), "|");
        sbappend(rollupStr, docNum, "~contractValueRollup_l~", string(get(lineDict, "contractValueRollup_l", "float")), "|");
        sbappend(rollupStr, docNum, "~netPriceRollup_l~", string(get(lineDict, "netPriceRollup_l", "float")), "|");
        sbappend(rollupStr, docNum, "~netAmountRollup_l~", string(get(lineDict, "netAmountRollup_l", "float")), "|");
        sbappend(rollupStr, docNum, "~contractListValueRollup_l~", string(get(lineDict, "contractListValueRollup_l", "float")), "|");
        sbappend(rollupStr, docNum, "~listPriceRollup_l~", string(get(lineDict, "listPriceRollup_l", "float")), "|");
        sbappend(rollupStr, docNum, "~discountPercentRollup_l~", string(get(lineDict, "discountPercentRollup_l", "float")), "|");
        sbappend(rollupStr, docNum, "~nonRecurRevRollup_l~", string(get(lineDict, "nonRecurRevRollup_l", "float")), "|");
        sbappend(rollupStr, docNum, "~recurRevRollup_l~", string(get(lineDict, "recurRevRollup_l", "float")), "|");
        sbappend(rollupStr, docNum, "~usageRevRollup_l~", string(get(lineDict, "usageRevRollup_l", "float")), "|");
    	sbappend(rollupStr, docNum, "~monthlyRecurRevRollup_l~", string(get(lineDict, "monthlyRecurRevRollup_l", "float")), "|");
    	sbappend(rollupStr, docNum, "~monthlyUsageRevRollup_l~", string(get(lineDict, "monthlyUsageRevRollup_l", "float")), "|");
    	sbappend(rollupStr, docNum, "~priceRecurFrequencyRollup_l~", get(lineDict, "priceRecurFrequencyRollup_l", "string"), "|");        
    }
    if(get(lineDict, "_parent_doc_number", "string") <> "" and v_taxPresent == "true"){
        if(containskey(lineDict, "_tax_taxRollup_l")){
            sbappend(rollupStr, docNum, "~_tax_taxRollup_l~", string(taxPriceRollup), "|");
        }
        if(containskey(lineDict, "_tax_totalPriceRollup_l")){
            sbappend(rollupStr, docNum, "~_tax_totalPriceRollup_l~",  string(totalPriceRollup), "|");
        }
        if(containskey(lineDict, "_tax_totalAmountRollup_l")){
            sbappend(rollupStr, docNum, "~_tax_totalAmountRollup_l~",  string(totalAmountRollup), "|");
        }
    }
}
  
groupSeqArray = split(get(lineDict, "_group_sequence_number", "string"),  ".");
groupSeqLine = groupSeqArray[0];
    if(get(lineDict, "_parent_doc_number", "string") == "")
    {
        rootDocNum = get(lineDict, "_document_number", "string") ;
        if(hasCharges) {
            put(recurRevDict, rootDocNum, get(lineDict, "recurRevRollup_l", "float"));
            put(nonRecurRevDict, rootDocNum, get(lineDict, "nonRecurRevRollup_l", "float"));
            put(usageRevDict, rootDocNum, get(lineDict, "usageRevRollup_l", "float"));
            put(contractValDict, rootDocNum, get(lineDict, "contractValueRollup_l", "float"));
            put(contractListValDict, rootDocNum, get(lineDict, "contractListValueRollup_l", "float"));
            put(monthlyRecurRevDict, rootDocNum, get(lineDict, "monthlyRecurRevRollup_l", "float"));
            put(monthlyUsageRevDict, rootDocNum, get(lineDict, "monthlyUsageRevRollup_l", "float"));
            put(rootPriceTypeDict, rootDocNum, get(lineDict, "priceTypeRollup_l", "string"));
            put(rootContractPeriodsDict, rootDocNum, get(lineDict, "contractedPeriodsForRollupCalcs", "integer"));
            put(rootPricePeriodDict, rootDocNum, get(lineDict, "priceRecurFrequencyRollup_l", "string"));
        } else {
            put(recurRevDict, rootDocNum, get(lineDict, "recurringRevSummable_l", "float"));
            put(nonRecurRevDict, rootDocNum, get(lineDict, "nonRecurRevSummable_l", "float"));
            put(usageRevDict, rootDocNum, get(lineDict, "usageRevSummable_l", "float"));
            put(contractValDict, rootDocNum, get(lineDict, "contractValue_l", "float"));
            put(contractListValDict, rootDocNum, get(lineDict, "contractListValue_l", "float"));
            put(monthlyRecurRevDict, rootDocNum, get(lineDict, "monthlyRecurRevSummable_l", "float"));
            put(monthlyUsageRevDict, rootDocNum, get(lineDict, "monthlyUsageRevSummable_l", "float"));
            put(rootPriceTypeDict, rootDocNum, get(lineDict, "priceType_l", "string"));
            put(rootContractPeriodsDict, rootDocNum, get(lineDict, "contractedPeriods_l", "integer"));
            put(rootPricePeriodDict, rootDocNum, get(lineDict, "priceRecurFrequency_l", "string"));
        }
        if(v_taxPresent == "true"){
            put(taxValDict, rootDocNum, taxPriceRollup);
            put(taxAmountDict, rootDocNum, taxAmountRollup );
            put(totalPriceDict, rootDocNum, totalPriceRollup);
            put(totalAmountDict, rootDocNum, totalAmountRollup);
        }
        put(quantityDict, rootDocNum, get(lineDict, "_price_quantity", "integer"));
        put(groupSeqDict, groupSeqLine, rootDocNum);  
        put(docGrpSeqDict, rootDocNum, groupSeqLine); 
          
        v__revenueCategory_l = get(lineDict, "_revenueCategory_l", "string");
        put(rootRevenueCatDict, v__revenueCategory_l, v__revenueCategory_l);
    } else {
        if(containskey(groupSeqDict, groupSeqLine)) {
            lineDocNum = get(groupSeqDict, groupSeqLine);
            if(hasCharges == true) {
                put(recurRevDict, lineDocNum, get(recurRevDict, lineDocNum, "float") + get(lineDict, "recurRevRollup_l", "float"));
                put(nonRecurRevDict, lineDocNum, get(nonRecurRevDict, lineDocNum, "float") + get(lineDict, "nonRecurRevRollup_l", "float"));
            	put(usageRevDict, lineDocNum, get(usageRevDict, lineDocNum, "float") + get(lineDict, "usageRevRollup_l", "float"));
                put(contractValDict, lineDocNum,  get(contractValDict, lineDocNum, "float") + get(lineDict, "contractValueRollup_l", "float"));
            	put(contractListValDict, lineDocNum,  get(contractListValDict, lineDocNum, "float") + get(lineDict, "contractListValueRollup_l", "float"));
                put(monthlyRecurRevDict, lineDocNum, get(monthlyRecurRevDict, lineDocNum, "float") + get(lineDict, "monthlyRecurRevRollup_l", "float"));
                put(monthlyUsageRevDict, lineDocNum, get(monthlyUsageRevDict, lineDocNum, "float") +  get(lineDict, "monthlyUsageRevSummable_l", "float"));
            } else {
                put(recurRevDict, lineDocNum, get(recurRevDict, lineDocNum, "float") + get(lineDict, "recurringRevSummable_l", "float"));
                put(nonRecurRevDict, lineDocNum, get(nonRecurRevDict, lineDocNum, "float") + get(lineDict, "nonRecurRevSummable_l", "float"));
                put(usageRevDict, lineDocNum, get(usageRevDict, lineDocNum, "float") + get(lineDict, "usageRevSummable_l", "float"));
                put(contractValDict, lineDocNum,  get(contractValDict, lineDocNum, "float") + get(lineDict, "contractValue_l", "float"));
                put(contractListValDict, lineDocNum,  get(contractListValDict, lineDocNum, "float") + get(lineDict, "contractListValue_l", "float"));
            	put(monthlyRecurRevDict, lineDocNum, get(monthlyRecurRevDict, lineDocNum, "float") + get(lineDict, "monthlyRecurRevSummable_l", "float"));
                put(monthlyUsageRevDict, lineDocNum, get(monthlyUsageRevDict, lineDocNum, "float") +  get(lineDict, "monthlyUsageRevSummable_l", "float"));
            }
            if(v_taxPresent == "true"){
                put(taxValDict, lineDocNum,  get(taxValDict, lineDocNum, "float") + taxPriceRollup);
            	put(taxAmountDict, lineDocNum,  get(taxAmountDict, lineDocNum, "float") + taxAmountRollup);  
                 
            	put(totalPriceDict, lineDocNum, get(totalPriceDict, lineDocNum, "float") + totalPriceRollup);
            	put(totalAmountDict, lineDocNum, get(totalAmountDict, lineDocNum, "float") + totalAmountRollup);
            }
        }
    }
    if(get(lineDict, "lineType_l", "string") <> "MODEL" or get(lineDict, "listPrice_l", "float") <> 0){ //ignore no price models
        if(containskey(priceTypeDict, groupSeqLine)) {
            priceType = get(priceTypeDict, groupSeqLine);
            pricePeriod = get(pricePeriodDict, groupSeqLine);
            contractPeriods = get(contractPeriodsDict, groupSeqLine, "integer");
            linePriceType = get(lineDict, "priceType_l", "string");
            if(hasCharges) {
                linePriceType = get(lineDict, "priceTypeRollup_l", "string");
            }
            if(linePriceType <> priceType)
            {
                put(priceTypeDict, groupSeqLine, "Mixed");           
            }
            v_priceRecurFrequency_l = get(lineDict, "priceRecurFrequency_l", "string");
            if(hasCharges) {
                v_priceRecurFrequency_l = get(lineDict, "priceRecurFrequencyRollup_l", "string");
            }
            if(v_priceRecurFrequency_l <> pricePeriod)
            {
                granular = ""; // keep the granular one.
                if(v_priceRecurFrequency_l == "MONTHLY" or pricePeriod == "MONTHLY" ) {
                    granular = "MONTHLY";
                } else {
                    if(v_priceRecurFrequency_l == "YEARLY" or pricePeriod == "YEARLY" ){
                        granular = "YEARLY";
                    }
                }
                put(pricePeriodDict, groupSeqLine, granular);
            }
              
        v_contractedPeriods_l = get(lineDict, "contractedPeriods_l", "integer");      
            if(hasCharges) {
                v_contractedPeriods_l = get(lineDict, "contractedPeriodsForRollupCalcs", "integer");
            }
            if(v_contractedPeriods_l > contractPeriods){ //keep largest
                put(contractPeriodsDict, groupSeqLine, v_contractedPeriods_l);
            }                                    
        } else {
            if(hasCharges) {
        	put(priceTypeDict, groupSeqLine, get(lineDict, "priceTypeRollup_l", "string"));
                put(contractPeriodsDict, groupSeqLine, get(lineDict, "contractedPeriodsForRollupCalcs", "integer"));
                put(pricePeriodDict, groupSeqLine, get(lineDict, "priceRecurFrequencyRollup_l", "string"));
            } else {
        	put(priceTypeDict, groupSeqLine, get(lineDict, "priceType_l", "string"));
                put(contractPeriodsDict, groupSeqLine, get(lineDict, "contractedPeriods_l", "integer"));
                put(pricePeriodDict, groupSeqLine, get(lineDict, "priceRecurFrequency_l", "string"));
            }                   
        }
    }
return sbtostring(rollupStr);